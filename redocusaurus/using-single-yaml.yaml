openapi: 3.1.0
info:
  title: EduCode REST API
  description: Educational AI Assistant
  version: '1.0'
paths:
  /suggest:
    post:
      summary: Get Suggestion
      description: >-
        Generate a suggestion for the given code snippet based on instructions.


        This endpoint uses the OpenAI API to process the provided code 

        and instructions, and it returns a modified version of the code.


        **Request Body:**

        - `code`: The code snippet that needs modification or suggestions.

        - `instructions`: Instructions on how to modify or enhance the code.


        **Response:**

        - `Response`: A generated code snippet based on the input code and
        instructions.


        - **Response status:**
          - `200 OK`: Successfully generated code.
          - `500 Internal Server Error`: If an error occurs during the generation.
      operationId: get_suggestion_suggest_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /askEducode:
    post:
      summary: Get Explanation
      description: This route returns AI generated explanations based on user's prompt
      operationId: get_explanation_askEducode_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplanationRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplanationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /logs:
    post:
      summary: Log Data
      description: Write data to a collection in database
      operationId: log_data_logs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeSnippet'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /suggestion-logs:
    post:
      summary: Log Suggestion
      description: Writes AI generated suggestions to 'CodeSnippets' collection.
      operationId: log_suggestion_suggestion_logs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionLog'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user-input-logs:
    post:
      summary: Log User Input
      description: Writes data to the 'interval_logging' collection
      operationId: log_user_input_user_input_logs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputLog'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /storeUser:
    post:
      summary: Add User Mongodb
      description: |-
        Data passed has the vscode created accountID and githubUsername
        Response is {message:str, status:int}
        Status:
            - 200: User document added to DB
            - 204: User already exists in DB
            - 500: error trying to fetch or post user
      operationId: add_user_mongodb_storeUser_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    CodeRequest:
      properties:
        code:
          type: string
          title: Code
        instructions:
          type: string
          title: Instructions
      type: object
      required:
        - code
        - instructions
      title: CodeRequest
      description: Represents the request body containing code and instructions.
    CodeSnippet:
      properties:
        userId:
          type: string
          title: Userid
        language:
          type: string
          title: Language
        code:
          type: string
          title: Code
        createdAt:
          type: string
          format: date-time
          title: Createdat
      type: object
      required:
        - userId
        - language
        - code
        - createdAt
      title: CodeSnippet
    ExplanationRequest:
      properties:
        question:
          type: string
          title: Question
      type: object
      required:
        - question
      title: ExplanationRequest
      description: Represents the request body containing code and instructions.
    ExplanationResponse:
      properties:
        output:
          type: string
          title: Output
        status:
          type: integer
          title: Status
      type: object
      required:
        - output
        - status
      title: ExplanationResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    SuggestionLog:
      properties:
        userId:
          type: string
          title: Userid
        eventType:
          type: string
          title: Eventtype
        suggestion:
          type: string
          title: Suggestion
        fileName:
          type: string
          title: Filename
        position:
          type: object
          title: Position
        timestamp:
          type: string
          title: Timestamp
      type: object
      required:
        - userId
        - eventType
        - suggestion
        - fileName
        - position
        - timestamp
      title: SuggestionLog
    SuggestionResponse:
      properties:
        Response:
          type: string
          title: Response
      type: object
      required:
        - Response
      title: SuggestionResponse
      description: >-
        Represents the response containing the generated suggestion or modified
        code.
    User:
      properties:
        gitHubUsername:
          type: string
          title: Githubusername
        accountId:
          type: string
          title: Accountid
      type: object
      required:
        - gitHubUsername
        - accountId
      title: User
    UserInputLog:
      properties:
        userId:
          type: string
          title: Userid
        code:
          type: string
          title: Code
        fileName:
          type: string
          title: Filename
        timestamp:
          type: string
          title: Timestamp
      type: object
      required:
        - userId
        - code
        - fileName
        - timestamp
      title: UserInputLog
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
