"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3153],{23938:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=s(74848),a=s(28453);const o={sidebar_position:2},i="Class Diagrams",r={id:"system-architecture/class-diagram",title:"Class Diagrams",description:"Front End Diagram",source:"@site/docs/system-architecture/class-diagram.md",sourceDirName:"system-architecture",slug:"/system-architecture/class-diagram",permalink:"/project-copilot-clone-1/docs/system-architecture/class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-copilot-clone-1/edit/main/documentation/docs/system-architecture/class-diagram.md",tags:[],version:"current",lastUpdatedBy:"mihirp11",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"design",permalink:"/project-copilot-clone-1/docs/system-architecture/design"},next:{title:"Sequence Diagrams",permalink:"/project-copilot-clone-1/docs/system-architecture/sequence-diagrams"}},d={},c=[{value:"Front End Diagram",id:"front-end-diagram",level:2},{value:"Back End Diagram",id:"back-end-diagram",level:2},{value:"Server",id:"server",level:3},{value:"Database",id:"database",level:3},{value:"OpenAI",id:"openai",level:3}];function g(e){const n={h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"class-diagrams",children:"Class Diagrams"}),"\n",(0,t.jsx)(n.h2,{id:"front-end-diagram",children:"Front End Diagram"}),"\n",(0,t.jsx)(n.mermaid,{value:"\nclassDiagram\n    direction TB\n\n    class User {\n        +userID: String\n        +username: String\n        +preferences: JSON\n        +getCodeSuggestions()\n        +viewActivityLogs()\n    }\n\n    class VSCodeExtension {\n        +suggestCode(userID, userCode): String\n        +logActivity(userID, action): void\n        +fetchLogs(userID): JSON\n    }\n\n    class Database {\n        +storeUserCode(userID, code): void\n        +storeLogs(userID, action): void\n        +getLogs(userID): JSON\n        +getSuggestions(context): String\n    }\n\n    class Suggestions {\n        +suggestSnippet(context): String\n        +getBoilerplate(type): String\n    }\n\n    class Dashboard {\n        +displayActivity(userID): JSON\n        +showCodeSuggestions(userID): JSON\n    }\n\n    User --\x3e VSCodeExtension : Uses\n    VSCodeExtension --\x3e Database : Stores & Fetches Data\n    VSCodeExtension --\x3e Suggestions : Retrieves Snippets\n    VSCodeExtension --\x3e Dashboard : Sends Data\n    Database --\x3e Dashboard : Provides Logs & Code Data\n\n\n"}),"\n",(0,t.jsx)(n.h2,{id:"back-end-diagram",children:"Back End Diagram"}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n\n    class User {\n        +String userId\n        +String username\n        +String email\n    }\n\n    class CodeSession {\n        +String sessionId\n        +String userId\n        +String codeContent\n        +Date lastUpdated\n    }\n\n    class Suggestion {\n        +String suggestionId\n        +String sessionId\n        +String suggestedCode\n        +String explanation\n        +Date timestamp\n    }\n\n    class MongoDB {\n        +storeCodeSession(sessionId, userId, codeContent)\n        +retrieveCodeSession(sessionId)\n        +storeSuggestion(suggestionId, sessionId, suggestedCode, explanation)\n    }\n\n    class OpenAI_LLM {\n        +generateCodeSuggestion(codeContent) \n    }\n\n    class BackendAPI {\n        +saveCode(userId, codeContent)\n        +fetchCode(sessionId)\n        +requestSuggestion(sessionId)\n    }\n\n    User "1" -- "many" CodeSession : owns\n    CodeSession "1" -- "many" Suggestion : has\n    CodeSession "1" -- "1" MongoDB : stored_in\n    Suggestion "1" -- "1" MongoDB : stored_in\n    BackendAPI "1" -- "1" MongoDB : interacts_with\n    BackendAPI "1" -- "1" OpenAI_LLM : requests_suggestions\n    OpenAI_LLM "1" -- "many" Suggestion : generates\n'}),"\n",(0,t.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,t.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,t.jsx)(n.h3,{id:"openai",children:"OpenAI"})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var t=s(96540);const a={},o=t.createContext(a);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);