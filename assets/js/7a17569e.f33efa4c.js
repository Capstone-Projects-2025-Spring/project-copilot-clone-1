"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[4240],{5463:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-copilot-clone-1/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-copilot-clone-1/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-copilot-clone-1/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-copilot-clone-1/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-copilot-clone-1/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-copilot-clone-1/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-copilot-clone-1/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"design","href":"/project-copilot-clone-1/docs/system-architecture/design","docId":"system-architecture/design","unlisted":false},{"type":"link","label":"Class Diagrams","href":"/project-copilot-clone-1/docs/system-architecture/class-diagram","docId":"system-architecture/class-diagram","unlisted":false},{"type":"link","label":"Sequence Diagrams","href":"/project-copilot-clone-1/docs/system-architecture/sequence-diagrams","docId":"system-architecture/sequence-diagrams","unlisted":false},{"type":"link","label":"Development Environment","href":"/project-copilot-clone-1/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Version Control","href":"/project-copilot-clone-1/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false}],"href":"/project-copilot-clone-1/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"EduCode REST API","href":"/project-copilot-clone-1/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false},{"type":"link","label":"EduCode Extension","href":"/project-copilot-clone-1/docs/api-specification/EduCodeModel","docId":"api-specification/EduCodeModel","unlisted":false}],"href":"/project-copilot-clone-1/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit tests","href":"/project-copilot-clone-1/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/project-copilot-clone-1/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-copilot-clone-1/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/project-copilot-clone-1/docs/category/test-procedures"}]},"docs":{"api-specification/EduCodeModel":{"id":"api-specification/EduCodeModel","title":"EduCode Extension","description":"+activate(context)","sidebar":"docsSidebar"},"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"EduCode REST API","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"EduCode is an AI pair programmer focused on making sure students are working alongside AI, not having it just complete work for them.","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"To use EduCode, users need:","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"System Block Diagram","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"Use Case 1 - User signs into EduCode for school as educator or student","sidebar":"docsSidebar"},"system-architecture/class-diagram":{"id":"system-architecture/class-diagram","title":"Class Diagrams","description":"Front End Diagram","sidebar":"docsSidebar"},"system-architecture/design":{"id":"system-architecture/design","title":"design","description":"EduCode","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"Required Hardware","sidebar":"docsSidebar"},"system-architecture/sequence-diagrams":{"id":"system-architecture/sequence-diagrams","title":"Sequence Diagrams","description":"Use Case 1","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"Educude will be created on GitHub.","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"For each method, one or more test cases.","sidebar":"docsSidebar"}}}}')}}]);